image: markussh/bsv_riscv-gcc:latest

variables:
  XILINX_VIVADO: "/opt/cad/xilinx/vitis/Vivado/2020.2"
  XILINX_LICENSE_FILE: "/opt/cad/keys/xilinx"

stages:
  - deps
  - build
  - corev
  - isa
  - priv
  - multi
  - embench (gskewed)
  - embench (no predictor)

before_script:
  # Vivado
  - export PATH="${XILINX_VIVADO}/bin:${PATH}:/opt/bsc/bin"
  - export LC_ALL=C
  
  # cloning submodules
  - git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.esa.informatik.tu-darmstadt.de/".insteadOf "https://gitlab.esa.informatik.tu-darmstadt.de/"
  - git submodule deinit -f .
  - git submodule sync
  - git rm core/libraries/BlueSRAM -f
  - git submodule update --init --recursive
  - pushd /opt/bsvtools/
  - git pull
  - popd

deps:
  stage: deps
  script:

  # BSV tools
  - pushd core
  - /opt/bsvtools/bsvAdd.py
  - popd
  
  # Build ISA testbench
  - pushd tools/riscv-tests
  - cp -r ../riscv-tests-override/* .
  - ls
  - ./configure
  - make install BUS=128
  - popd

  # Build embench
  - pushd tools/embench
  - pushd embench-iot
  - git reset --hard HEAD
  - popd
  - make patch
  - make
  - make install
  - popd

  # build priv tests
  - pushd tools/riscv-arch-tests
  - make install
  - popd

  # build amo tests
  - export PATH="/opt/cad/mentor/2020-21/RHELx86/QUESTA-CORE-PRIME_2020.4/questasim/bin:${PATH}"
  - export MGLS_LICENSE_FILE=/opt/cad/keys/mentor
  - yum install -y python3 python3-pip libXft
  - pip install cocotb-bus cocotb
  - pushd tools/riscv-dv
  - export PATH=$HOME/.local/bin/:$PATH  # add ~/.local/bin to the $PATH (only once)
  - pip3 install --user -e .
  - popd
  - pushd tools/riscv-dv-build
  - make install
  - popd

  # build custom stuff
  - pushd tools/customTests
  - make
  - make install
  - popd

  - pushd core
  - make clean
  - popd
  
  artifacts:
    paths:
      - core/.bsv_tools
      - testPrograms/*

buildSimple:
  stage: build
  script:
  - |
    cp testConfigs/simple_gshare.bsv core/src/Config.bsv
    cd core
    make SIM_TYPE=VERILOG ip
    
buildMedium:
  stage: build
  script:
  - |
    cp testConfigs/medium_gshare.bsv core/src/Config.bsv
    cd core
    make SIM_TYPE=VERILOG ip
    
buildHigh:
  stage: build
  script:
  - |
    cp testConfigs/high_gshare.bsv core/src/Config.bsv
    cd core
    make SIM_TYPE=VERILOG ip

run_isaTb_simple:
  stage: isa
  script:
    - cp testConfigs/simple_smiths.bsv core/src/Config.bsv
    - pushd core
    - make TB=ISA_TB
    - popd
    
run_isaTb_medium:
  stage: isa
  script:
    - cp testConfigs/medium_gshare.bsv core/src/Config.bsv
    - pushd core
    - make TB=ISA_TB
    - popd
    
run_isaTb_high:
  stage: isa
  allow_failure: True
  script:
    - cp testConfigs/high_nopred.bsv core/src/Config.bsv
    - pushd core
    - make TB=ISA_TB
    - popd

run_privTb_simple:
  stage: priv
  script:
    - cp testConfigs/simple_smiths.bsv core/src/Config.bsv
    - pushd core
    - make TB=PRIV_TB
    - popd
    
run_privTb_medium:
  stage: priv
  script:
    - cp testConfigs/medium_gshare.bsv core/src/Config.bsv
    - pushd core
    - make TB=PRIV_TB
    - popd
    
run_privTb_high:
  stage: priv
  script:
    - cp testConfigs/high_nopred.bsv core/src/Config.bsv
    - pushd core
    - make TB=PRIV_TB
    - popd

#run_embenchTb_smiths_simple:
#  stage: embench (smiths)
#  timeout: 2d
#  script:
#    - cp testConfigs/simple_smiths.bsv core/src/Config.bsv
#    - pushd core
#    - make TB=EMBENCH_TB BRANCH=1
#    - popd
    
#run_embenchTb_smiths_medium:
#  stage: embench (smiths)
#  timeout: 2d
#  allow_failure: true
#  script:
#    - cp testConfigs/medium_smiths.bsv core/src/Config.bsv
#    - pushd core
#    - make TB=EMBENCH_TB BRANCH=1
#    - popd
    
#run_embenchTb_smiths_high:
#  stage: embench (smiths)
#  timeout: 2d
#  allow_failure: true
#  script:
#    - cp testConfigs/high_smiths.bsv core/src/Config.bsv
#    - pushd core
#    - make TB=EMBENCH_TB BRANCH=1
#    - popd

#run_embenchTb_gshare_simple:
#  stage: embench (gshare)
#  timeout: 2d
#  script:
#    - cp testConfigs/simple_gshare.bsv core/src/Config.bsv
#    - pushd core
#    - make TB=EMBENCH_TB BRANCH=1
#    - popd
    
#run_embenchTb_gshare_medium:
#  stage: embench (gshare)
#  timeout: 2d
#  allow_failure: true
#  script:
#    - cp testConfigs/medium_gshare.bsv core/src/Config.bsv
#    - pushd core
#    - make TB=EMBENCH_TB BRANCH=1
#    - popd
    
#run_embenchTb_gshare_high:
#  stage: embench (gshare)
#  timeout: 2d
#  allow_failure: true
#  script:
#    - cp testConfigs/high_gshare.bsv core/src/Config.bsv
#    - pushd core
#    - make TB=EMBENCH_TB BRANCH=1
#    - popd

run_embenchTb_none_simple:
  stage: embench (no predictor)
  timeout: 2d
  script:
    - cp testConfigs/simple_nopred.bsv core/src/Config.bsv
    - pushd core
    - make TB=EMBENCH_TB BRANCH=1
    - popd
    
run_embenchTb_none_medium:
  stage: embench (no predictor)
  timeout: 2d
  allow_failure: true
  script:
    - cp testConfigs/medium_nopred.bsv core/src/Config.bsv
    - pushd core
    - make TB=EMBENCH_TB BRANCH=1
    - popd
    
run_embenchTb_none_high:
  stage: embench (no predictor)
  timeout: 2d
  allow_failure: true
  script:
    - cp testConfigs/high_nopred.bsv core/src/Config.bsv
    - pushd core
    - make TB=EMBENCH_TB BRANCH=1
    - popd

run_embenchTb_gskewed_simple:
  stage: embench (gskewed)
  timeout: 2d
  script:
    - cp testConfigs/simple_gskewed.bsv core/src/Config.bsv
    - pushd core
    - make TB=EMBENCH_TB BRANCH=1
    - popd
    
run_embenchTb_gskewed_medium:
  stage: embench (gskewed)
  timeout: 2d
  allow_failure: true
  script:
    - cp testConfigs/medium_gskewed.bsv core/src/Config.bsv
    - pushd core
    - make TB=EMBENCH_TB BRANCH=1
    - popd
    
run_embenchTb_gskewed_high:
  stage: embench (gskewed)
  timeout: 2d
  allow_failure: true
  script:
    - cp testConfigs/high_gskewed.bsv core/src/Config.bsv
    - pushd core
    - make TB=EMBENCH_TB BRANCH=1
    - popd

run_amo_multicore:
  stage: multi
  script:
    - cp testConfigs/multihart-isa.bsv core/src/Config.bsv
    - pushd core
    - make TB=AMO_TB
    - popd

run_lrsc_stress_multicore:
  stage: multi
  script:
    - cp testConfigs/multihart-random.bsv core/src/Config.bsv
    - pushd core
    - make TB=LRSC_TB
    - popd

run_corev_simple:
  stage: corev
  timeout: 2d
  script:
    - yum install -y dtc python3 python3-pip libXft python3-devel
    - pushd tools/core-v-verif/bin
    - pip3 install -r requirements.txt
    - popd
    - export PATH="/opt/cad/mentor/2020-21/RHELx86/QUESTA-CORE-PRIME_2020.4/questasim/bin:${PATH}"
    - export MGLS_LICENSE_FILE=/opt/cad/keys/mentor
    - cp testConfigs/simple_smiths_cv.bsv core/src/Config.bsv
    - export RISCV=/opt/riscv/
    - source ./run_core_v.sh
  artifacts:
    paths:
      - tools/core-v-verif/scoooter/sim/out*
      - tools/core-v-verif/core-v-logs
    when: always

    
run_corev_medium:
  stage: corev
  timeout: 2d
  script:
    - yum install -y dtc python3 python3-pip libXft python3-devel
    - pushd tools/core-v-verif/bin
    - pip3 install -r requirements.txt
    - popd
    - export PATH="/opt/cad/mentor/2020-21/RHELx86/QUESTA-CORE-PRIME_2020.4/questasim/bin:${PATH}"
    - export MGLS_LICENSE_FILE=/opt/cad/keys/mentor
    - cp testConfigs/medium_gshare_cv.bsv core/src/Config.bsv
    - export RISCV=/opt/riscv/
    - source ./run_core_v.sh
  artifacts:
    paths:
      - tools/core-v-verif/scoooter/sim/out*
      - tools/core-v-verif/core-v-logs
    when: always

    
run_corev_high:
  stage: corev
  timeout: 2d
  script:
    - yum install -y dtc python3 python3-pip libXft python3-devel
    - pushd tools/core-v-verif/bin
    - pip3 install -r requirements.txt
    - popd
    - export PATH="/opt/cad/mentor/2020-21/RHELx86/QUESTA-CORE-PRIME_2020.4/questasim/bin:${PATH}"
    - export MGLS_LICENSE_FILE=/opt/cad/keys/mentor
    - cp testConfigs/high_gskewed_cv.bsv core/src/Config.bsv
    - export RISCV=/opt/riscv/ 
    - source ./run_core_v.sh
  artifacts:
    paths:
      - tools/core-v-verif/scoooter/sim/out*
      - tools/core-v-verif/core-v-logs
    when: always

